require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe StintsController do

  context "with Artist" do
    let!(:maya) { Artist.find_or_create_by(name: 'Maya') }
    let!(:my_band) { Band.find_or_create_by(name: 'MyBand') }

    # This should return the minimal set of attributes required to create a valid
    # Stint. As you add validations to Stint, be sure to
    # adjust the attributes here as well.
    let(:valid_attributes) { {:band_id => my_band.id, :artist_id => maya.id} }

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # StintsController. Be sure to keep this updated too.
    let(:valid_session) { {} }

    describe "GET index" do
      it "assigns all stints as @stints" do
        stint = Stint.create! valid_attributes
        get :index, {:artist_id => maya.to_param}, valid_session
        assigns(:stints).should eq([stint])
      end
    end

    describe "GET show" do
      it "assigns the requested stint as @stint" do
        stint = Stint.create! valid_attributes
        get :show, {:artist_id => maya.to_param, :id => stint.to_param}, valid_session
        assigns(:stint).should eq(stint)
      end
    end

    describe "GET new" do
      it "assigns a new stint as @stint" do
        get :new, {:artist_id => maya.to_param}, valid_session
        assigns(:stint).should be_a_new(Stint)
      end
    end

    describe "GET edit" do
      it "assigns the requested stint as @stint" do
        stint = Stint.create! valid_attributes
        get :edit, {:artist_id => maya.to_param, :id => stint.to_param}, valid_session
        assigns(:stint).should eq(stint)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Stint" do
          expect {
            post :create, {:artist_id => maya.to_param, :stint => valid_attributes}, valid_session
          }.to change(Stint, :count).by(1)
        end

        it "assigns a newly created stint as @stint" do
          post :create, {:artist_id => maya.to_param, :stint => valid_attributes}, valid_session
          assigns(:stint).should be_a(Stint)
          assigns(:stint).should be_persisted
        end

        it "redirects to the created stint" do
          post :create, {:artist_id => maya.to_param, :stint => valid_attributes}, valid_session
          response.should redirect_to(artist_stints_path(maya))
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved stint as @stint" do
          # Trigger the behavior that occurs when invalid params are submitted
          Stint.any_instance.stub(:save).and_return(false)
          post :create, {:artist_id => maya.to_param, :stint => {"band" => "invalid value"}}, valid_session
          assigns(:stint).should be_a_new(Stint)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Stint.any_instance.stub(:save).and_return(false)
          post :create, {:artist_id => maya.to_param, :stint => {"band" => "invalid value"}}, valid_session
          response.should render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested stint" do
          stint = Stint.create! valid_attributes
          # Assuming there are no other stints in the database, this
          # specifies that the Stint created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          Stint.any_instance.should_receive(:update).with(:band_id.to_s => my_band.id.to_s)
          put :update, {:artist_id => maya.to_param, :id => stint.to_param, :stint => {:band_id => my_band.id}}, valid_session
        end

        it "assigns the requested stint as @stint" do
          stint = Stint.create! valid_attributes
          put :update, {:artist_id => maya.to_param, :id => stint.to_param, :stint => valid_attributes}, valid_session
          assigns(:stint).should eq(stint)
        end

        it "redirects to the stint" do
          stint = Stint.create! valid_attributes
          put :update, {:artist_id => maya.to_param, :id => stint.to_param, :stint => valid_attributes}, valid_session
          response.should redirect_to(artist_stints_path(maya))
        end
      end

      describe "with invalid params" do
        it "assigns the stint as @stint" do
          stint = Stint.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          Stint.any_instance.stub(:save).and_return(false)
          put :update, {:artist_id => maya.to_param, :id => stint.to_param, :stint => {"band" => "invalid value"}}, valid_session
          assigns(:stint).should eq(stint)
        end

        it "re-renders the 'edit' template" do
          stint = Stint.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          Stint.any_instance.stub(:save).and_return(false)
          put :update, {:artist_id => maya.to_param, :id => stint.to_param, :stint => {"band" => "invalid value"}}, valid_session
          response.should render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested stint" do
        stint = Stint.create! valid_attributes
        expect {
          delete :destroy, {:artist_id => maya.to_param, :id => stint.to_param}, valid_session
        }.to change(Stint, :count).by(-1)
      end

      it "redirects to the stints list" do
        stint = Stint.create! valid_attributes
        delete :destroy, {:artist_id => maya.to_param, :id => stint.to_param}, valid_session
        response.should redirect_to(artist_stints_url(maya))
      end
    end
  end
end
